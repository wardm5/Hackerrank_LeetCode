//-------------------------------------------------------------------------------
//    Misha Ward
//-------------------------------------------------------------------------------

/*-------------------------------------------------------------------------------

Problem:
Given two strings s and t which consist of only lowercase letters.

String t is generated by random shuffling string s and then add one more letter at a random position.

Find the letter that was added in t.

Example:
Input:
s = "abcd"
t = "abcde"

Output:
e

Explanation:
'e' is the letter that was added.

-------------------------------------------------------------------------------*/

//-------------------------------------------------------------------------------
//    Approach
//-------------------------------------------------------------------------------

/*
    1) create map to store character and counts
    2) loop through the length of both strings
        2.1) if i is less than the length of the first string, add the value to the map, increment its count
        2.2) if i is less than the length of the second string, add the character to the map, decrement its count
        2.3) increment i
    3) loop through map to find the character that has a count that is not zero, return that char
*/

//-------------------------------------------------------------------------------
//    Soluton
//-------------------------------------------------------------------------------

class Solution {
    // public char findTheDifference(String s, String t) {
    //     // Map<Character, Integer> map = new HashMap<>();
    //     int i = 0;
    //     char temp = 0;
    //     while (i < s.length() || i < t.length()) {
    //         if (i<s.length())
    //             temp ^= (int)s.charAt(i);
    //             // map.put(s.charAt(i), map.getOrDefault(s.charAt(i), 0) + 1);
    //         if (i< t.length())
    //             temp ^= (int) t.charAt(i);
    //             // map.put(t.charAt(i), map.getOrDefault(t.charAt(i), 0) - 1);
    //         i++;
    //     }
    //     // for (char c: map.keySet())  {
    //     //     if (map.get(c) != 0)
    //     //         return c;
    //     // }
    //     return (char) temp;
    // }
    public char findTheDifference(String s, String t) {
        char c = t.charAt(t.length() - 1);
        for (int i = 0; i < s.length(); i++) {
            c ^= s.charAt(i);
            c ^= t.charAt(i);
        }
        return c;
    }
}

/*
    Runtime: 1 ms, faster than 98.91% of Java online submissions for Find the Difference.
    Memory Usage: 37.9 MB, less than 6.25% of Java online submissions for Find the Difference.
*/
